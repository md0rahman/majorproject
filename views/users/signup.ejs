<!-- users/signup.ejs -->

<div class="row mt-5">
  <div class="col-lg-7 col-md-10 col-sm-10 mx-auto">
    <div class="card shadow-lg border-0 rounded-4 overflow-hidden" style="background: linear-gradient(145deg, #ffffff, #f8f9fa); transition: transform 0.2s ease, box-shadow 0.2s ease;">
      <div class="card-header text-black text-center py-3">
        <h3 class="mb-0 fw-bold">üìù SignUp on Wanderlust</h3>
      </div>

      <div class="card-body p-4">
        <!-- Server / flash errors (if any) -->
        <% if (typeof errors !== 'undefined' && errors.length) { %>
          <div class="alert alert-danger small" role="alert" aria-live="assertive">
            <ul class="mb-0">
              <% errors.forEach(function(err){ %>
                <li><%= err.msg || err %></li>
              <% }) %>
            </ul>
          </div>
        <% } %>

        <!-- Example success message for "verification email sent" -->
        <% if (typeof successMsg !== 'undefined') { %>
          <div class="alert alert-success small" role="status" aria-live="polite"><%= successMsg %></div>
        <% } %>

        <form action="/signup" method="POST" class="needs-validation" novalidate id="signupForm" aria-describedby="signupInstructions">
          <% if (typeof csrfToken !== 'undefined') { %>
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <% } %>

          <!-- Honeypot field (hidden from users) -->
          <div style="display:none !important;">
            <label>Leave this field empty</label>
            <input type="text" name="website" tabindex="-1" autocomplete="off">
          </div>

          <div id="signupInstructions" class="visually-hidden">
            Enter username, email and password. Password must be at least 6 characters.
          </div>

          <!-- Username -->
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input 
              name="username" 
              id="username"
              type="text" 
              class="form-control" 
              placeholder="Enter your username"
              required 
              autocomplete="username"
              aria-describedby="usernameHelp usernameStatus"
              value="<%= typeof formData !== 'undefined' ? formData.username : '' %>"
              autofocus
            />
            <div id="usernameHelp" class="form-text small text-muted">Unique username (letters, numbers, underscores).</div>
            <div id="usernameStatus" class="small mt-1" aria-live="polite"></div>
            <div class="invalid-feedback">Please enter a username.</div>
          </div>

          <!-- Email -->
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input 
              name="email" 
              id="email"
              type="email" 
              class="form-control" 
              placeholder="Enter your email"
              required 
              autocomplete="email"
              aria-describedby="emailHelp emailStatus"
              value="<%= typeof formData !== 'undefined' ? formData.email : '' %>"
            />
            <div id="emailHelp" class="form-text small text-muted">We'll send a verification link to this address.</div>
            <div id="emailStatus" class="small mt-1" aria-live="polite"></div>
            <div class="invalid-feedback">Please enter a valid email address.</div>
          </div>

          <!-- Password -->
          <div class="mb-3 position-relative">
            <label for="password" class="form-label">Password</label>
            <div class="input-group">
              <input 
                name="password" 
                id="password"
                type="password" 
                class="form-control" 
                placeholder="Enter a strong password"
                minlength="6"
                required 
                autocomplete="new-password"
                aria-describedby="passwordHelp passwordStrength"
              />
              <button class="btn btn-outline-secondary" type="button" id="togglePassword" aria-label="Toggle password visibility">
                <i class="far fa-eye" aria-hidden="true"></i>
              </button>
            </div>
            <div id="passwordHelp" class="form-text small text-muted mt-1">
              At least 6 characters. Prefer mix: uppercase, lowercase, numbers, symbols.
            </div>

            <!-- Visual strength bar -->
            <div class="mt-2" aria-hidden="false">
              <div class="progress" style="height:8px;">
                <div id="pwStrengthBar" class="progress-bar" role="progressbar" style="width:0%"></div>
              </div>
              <div id="passwordStrength" class="small mt-1" aria-live="polite">Strength: <span id="pwStrengthText">‚Äî</span></div>
            </div>

            <div class="invalid-feedback">Password must be at least 6 characters long.</div>
          </div>

          <!-- Confirm Password -->
          <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <div class="input-group">
              <input 
                name="confirmPassword" 
                id="confirmPassword"
                type="password" 
                class="form-control" 
                placeholder="Re-enter your password"
                required 
                autocomplete="new-password"
                aria-describedby="confirmHelp"
              />
              <button class="btn btn-outline-secondary" type="button" id="toggleConfirm" aria-label="Toggle confirm password visibility">
                <i class="far fa-eye" aria-hidden="true"></i>
              </button>
            </div>
            <div id="confirmHelp" class="form-text small text-muted mt-1">Make sure both passwords match.</div>
            <div class="invalid-feedback" id="confirmError">Passwords do not match.</div>
          </div>

          <!-- Terms Checkbox -->
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="terms" name="terms" required>
            <label class="form-check-label small text-muted" for="terms">
              I agree to the <a href="/signup" class="text-decoration-none">Terms & Conditions</a>
            </label>
            <div class="invalid-feedback">You must agree before submitting.</div>
          </div>

          <!-- Submit Button -->
          <div class="d-grid">
            <button class="btn btn-dark btn-lg mt-4" type="submit" id="submitBtn" aria-live="polite" aria-busy="false">
              <i class="fas fa-user-plus me-2" aria-hidden="true"></i>
              <span id="submitText">Create Account</span>
              <span id="submitSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
            </button>
          </div>

          <!-- Link to Login -->
          <p class="text-center mt-3 mb-0">
            Already have an account? 
            <a href="/login" class="text-decoration-none">Login here</a>
          </p>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  /* Strength colors */
  .progress-bar.very-weak { width: 20%; background-color: #e74c3c; }
  .progress-bar.weak { width: 40%; background-color: #f39c12; }
  .progress-bar.good { width: 65%; background-color: #f1c40f; }
  .progress-bar.strong { width: 100%; background-color: #2ecc71; }
  .status-ok { color: #198754; }
  .status-bad { color: #dc3545; }
  .status-warn { color: #ff8c00; }
</style>

<script>
  (function(){
    'use strict';
    const form = document.getElementById('signupForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const submitSpinner = document.getElementById('submitSpinner');

    const usernameEl = document.getElementById('username');
    const usernameStatus = document.getElementById('usernameStatus');
    const emailEl = document.getElementById('email');
    const emailStatus = document.getElementById('emailStatus');

    const pwInput = document.getElementById('password');
    const pwBar = document.getElementById('pwStrengthBar');
    const pwText = document.getElementById('pwStrengthText');
    const confirmInput = document.getElementById('confirmPassword');
    const confirmError = document.getElementById('confirmError');

    // Debounce helper
    function debounce(fn, wait=400){
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn.apply(this, args), wait);
      };
    }

    // Live availability checks (assumes backend endpoints)
    async function checkUsername(name) {
      if (!name || name.length < 3) {
        usernameStatus.textContent = '';
        usernameStatus.className = '';
        return;
      }
      usernameStatus.textContent = 'Checking...';
      usernameStatus.className = '';
      try {
        const res = await fetch('/check-username?username=' + encodeURIComponent(name));
        if (!res.ok) throw new Error('Network');
        const data = await res.json();
        if (data.available) {
          usernameStatus.textContent = 'Username available';
          usernameStatus.className = 'status-ok';
        } else {
          usernameStatus.textContent = 'Username taken';
          usernameStatus.className = 'status-bad';
        }
      } catch (e) {
        usernameStatus.textContent = '';
      }
    }
    usernameEl.addEventListener('input', debounce(e => checkUsername(e.target.value)));

    async function checkEmail(email) {
      if (!email || email.indexOf('@') === -1) {
        emailStatus.textContent = '';
        emailStatus.className = '';
        return;
      }
      emailStatus.textContent = 'Checking...';
      try {
        const res = await fetch('/check-email?email=' + encodeURIComponent(email));
        if (!res.ok) throw new Error('Network');
        const data = await res.json();
        if (data.available) {
          emailStatus.textContent = 'Email looks good';
          emailStatus.className = 'status-ok';
        } else {
          emailStatus.textContent = 'Email already registered';
          emailStatus.className = 'status-bad';
        }
      } catch (e) {
        emailStatus.textContent = '';
      }
    }
    emailEl.addEventListener('input', debounce(e => checkEmail(e.target.value)));

    // Toggle password visibility
    document.getElementById('togglePassword').addEventListener('click', function(){
      const type = pwInput.getAttribute('type') === 'password' ? 'text' : 'password';
      pwInput.setAttribute('type', type);
      this.querySelector('i').classList.toggle('fa-eye-slash');
    });
    document.getElementById('toggleConfirm').addEventListener('click', function(){
      const type = confirmInput.getAttribute('type') === 'password' ? 'text' : 'password';
      confirmInput.setAttribute('type', type);
      this.querySelector('i').classList.toggle('fa-eye-slash');
    });

    // Password strength (visual + text)
    pwInput.addEventListener('input', function(){
      const v = pwInput.value || '';
      let score = 0;
      if (v.length >= 6) score++;
      if (/[A-Z]/.test(v)) score++;
      if (/[0-9]/.test(v)) score++;
      if (/[^A-Za-z0-9]/.test(v)) score++;
      if (v.length >= 12) score++;

      pwBar.className = 'progress-bar';
      if (!v) {
        pwBar.style.width = '0%';
        pwText.textContent = '‚Äî';
        return;
      }
      if (score <= 1) {
        pwBar.classList.add('very-weak');
        pwText.textContent = 'Very weak';
      } else if (score === 2) {
        pwBar.classList.add('weak');
        pwText.textContent = 'Weak';
      } else if (score === 3) {
        pwBar.classList.add('good');
        pwText.textContent = 'Good';
      } else {
        pwBar.classList.add('strong');
        pwText.textContent = 'Strong';
      }
    });

    // Confirm password live check
    function checkPasswordsMatch() {
      if (!confirmInput.value) {
        confirmInput.classList.remove('is-invalid');
        confirmError.style.display = 'none';
        return true;
      }
      if (pwInput.value !== confirmInput.value) {
        confirmInput.classList.add('is-invalid');
        confirmError.style.display = 'block';
        return false;
      } else {
        confirmInput.classList.remove('is-invalid');
        confirmError.style.display = 'none';
        return true;
      }
    }
    pwInput.addEventListener('input', checkPasswordsMatch);
    confirmInput.addEventListener('input', checkPasswordsMatch);

    // Prevent double submit, bootstrap-like validation
    form.addEventListener('submit', function(e){
      // Honeypot check (if filled, silently fail)
      const hp = form.querySelector('input[name="website"]');
      if (hp && hp.value) {
        e.preventDefault();
        return;
      }

      // custom confirm password validation
      if (!checkPasswordsMatch()) {
        e.preventDefault();
        e.stopPropagation();
        confirmInput.focus();
        return;
      }

      if (!form.checkValidity()) {
        e.preventDefault();
        e.stopPropagation();
        form.classList.add('was-validated');
        return;
      }

      // Disable and show spinner
      submitBtn.disabled = true;
      submitBtn.setAttribute('aria-busy','true');
      submitSpinner.classList.remove('d-none');
      submitText.textContent = 'Creating...';
      // Let form submit to server (no preventDefault)
    }, false);

    // Improve Enter behaviour (only submit when valid)
    const inputs = form.querySelectorAll('input');
    inputs.forEach(i => {
      i.addEventListener('keydown', function(ev){
        if (ev.key === 'Enter') {
          if (!form.checkValidity() || !checkPasswordsMatch()) {
            ev.preventDefault();
            form.classList.add('was-validated');
          }
        }
      });
    });
  })();
</script>
